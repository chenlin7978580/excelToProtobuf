// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monster_OtherConfig.proto

#ifndef PROTOBUF_Monster_5fOtherConfig_2eproto__INCLUDED
#define PROTOBUF_Monster_5fOtherConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace ProConfigSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Monster_5fOtherConfig_2eproto();
void protobuf_AssignDesc_Monster_5fOtherConfig_2eproto();
void protobuf_ShutdownFile_Monster_5fOtherConfig_2eproto();

class Monster_OtherConfig;

enum Monster_OtherConfig_ENUMTEST {
  Monster_OtherConfig_ENUMTEST_ENUMTESTB = 2,
  Monster_OtherConfig_ENUMTEST_ENUMTESTC = 4,
  Monster_OtherConfig_ENUMTEST_ENUMTESTA = 1
};
bool Monster_OtherConfig_ENUMTEST_IsValid(int value);
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig_ENUMTEST_ENUMTEST_MIN = Monster_OtherConfig_ENUMTEST_ENUMTESTA;
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig_ENUMTEST_ENUMTEST_MAX = Monster_OtherConfig_ENUMTEST_ENUMTESTC;
const int Monster_OtherConfig_ENUMTEST_ENUMTEST_ARRAYSIZE = Monster_OtherConfig_ENUMTEST_ENUMTEST_MAX + 1;

const ::google::protobuf::EnumDescriptor* Monster_OtherConfig_ENUMTEST_descriptor();
inline const ::std::string& Monster_OtherConfig_ENUMTEST_Name(Monster_OtherConfig_ENUMTEST value) {
  return ::google::protobuf::internal::NameOfEnum(
    Monster_OtherConfig_ENUMTEST_descriptor(), value);
}
inline bool Monster_OtherConfig_ENUMTEST_Parse(
    const ::std::string& name, Monster_OtherConfig_ENUMTEST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Monster_OtherConfig_ENUMTEST>(
    Monster_OtherConfig_ENUMTEST_descriptor(), name, value);
}
// ===================================================================

class Monster_OtherConfig : public ::google::protobuf::Message {
 public:
  Monster_OtherConfig();
  virtual ~Monster_OtherConfig();

  Monster_OtherConfig(const Monster_OtherConfig& from);

  inline Monster_OtherConfig& operator=(const Monster_OtherConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Monster_OtherConfig& default_instance();

  void Swap(Monster_OtherConfig* other);

  // implements Message ----------------------------------------------

  Monster_OtherConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Monster_OtherConfig& from);
  void MergeFrom(const Monster_OtherConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Monster_OtherConfig_ENUMTEST ENUMTEST;
  static const ENUMTEST ENUMTESTB = Monster_OtherConfig_ENUMTEST_ENUMTESTB;
  static const ENUMTEST ENUMTESTC = Monster_OtherConfig_ENUMTEST_ENUMTESTC;
  static const ENUMTEST ENUMTESTA = Monster_OtherConfig_ENUMTEST_ENUMTESTA;
  static inline bool ENUMTEST_IsValid(int value) {
    return Monster_OtherConfig_ENUMTEST_IsValid(value);
  }
  static const ENUMTEST ENUMTEST_MIN =
    Monster_OtherConfig_ENUMTEST_ENUMTEST_MIN;
  static const ENUMTEST ENUMTEST_MAX =
    Monster_OtherConfig_ENUMTEST_ENUMTEST_MAX;
  static const int ENUMTEST_ARRAYSIZE =
    Monster_OtherConfig_ENUMTEST_ENUMTEST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ENUMTEST_descriptor() {
    return Monster_OtherConfig_ENUMTEST_descriptor();
  }
  static inline const ::std::string& ENUMTEST_Name(ENUMTEST value) {
    return Monster_OtherConfig_ENUMTEST_Name(value);
  }
  static inline bool ENUMTEST_Parse(const ::std::string& name,
      ENUMTEST* value) {
    return Monster_OtherConfig_ENUMTEST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string showformat = 4;
  inline bool has_showformat() const;
  inline void clear_showformat();
  static const int kShowformatFieldNumber = 4;
  inline const ::std::string& showformat() const;
  inline void set_showformat(const ::std::string& value);
  inline void set_showformat(const char* value);
  inline void set_showformat(const char* value, size_t size);
  inline ::std::string* mutable_showformat();
  inline ::std::string* release_showformat();
  inline void set_allocated_showformat(::std::string* showformat);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 imageid = 3;
  inline bool has_imageid() const;
  inline void clear_imageid();
  static const int kImageidFieldNumber = 3;
  inline ::google::protobuf::int32 imageid() const;
  inline void set_imageid(::google::protobuf::int32 value);

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string showformat1 = 5;
  inline bool has_showformat1() const;
  inline void clear_showformat1();
  static const int kShowformat1FieldNumber = 5;
  inline const ::std::string& showformat1() const;
  inline void set_showformat1(const ::std::string& value);
  inline void set_showformat1(const char* value);
  inline void set_showformat1(const char* value, size_t size);
  inline ::std::string* mutable_showformat1();
  inline ::std::string* release_showformat1();
  inline void set_allocated_showformat1(::std::string* showformat1);

  // optional int32 rate = 6;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 6;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // optional string desc = 7;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 7;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:ProConfigSpace.Monster_OtherConfig)
 private:
  inline void set_has_showformat();
  inline void clear_has_showformat();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_imageid();
  inline void clear_has_imageid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_showformat1();
  inline void clear_has_showformat1();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* showformat_;
  ::std::string* name_;
  ::google::protobuf::int32 imageid_;
  ::google::protobuf::int32 id_;
  ::std::string* showformat1_;
  ::std::string* desc_;
  ::google::protobuf::int32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Monster_5fOtherConfig_2eproto();
  friend void protobuf_AssignDesc_Monster_5fOtherConfig_2eproto();
  friend void protobuf_ShutdownFile_Monster_5fOtherConfig_2eproto();

  void InitAsDefaultInstance();
  static Monster_OtherConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Monster_OtherConfig

// optional string showformat = 4;
inline bool Monster_OtherConfig::has_showformat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Monster_OtherConfig::set_has_showformat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Monster_OtherConfig::clear_has_showformat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Monster_OtherConfig::clear_showformat() {
  if (showformat_ != &::google::protobuf::internal::kEmptyString) {
    showformat_->clear();
  }
  clear_has_showformat();
}
inline const ::std::string& Monster_OtherConfig::showformat() const {
  return *showformat_;
}
inline void Monster_OtherConfig::set_showformat(const ::std::string& value) {
  set_has_showformat();
  if (showformat_ == &::google::protobuf::internal::kEmptyString) {
    showformat_ = new ::std::string;
  }
  showformat_->assign(value);
}
inline void Monster_OtherConfig::set_showformat(const char* value) {
  set_has_showformat();
  if (showformat_ == &::google::protobuf::internal::kEmptyString) {
    showformat_ = new ::std::string;
  }
  showformat_->assign(value);
}
inline void Monster_OtherConfig::set_showformat(const char* value, size_t size) {
  set_has_showformat();
  if (showformat_ == &::google::protobuf::internal::kEmptyString) {
    showformat_ = new ::std::string;
  }
  showformat_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Monster_OtherConfig::mutable_showformat() {
  set_has_showformat();
  if (showformat_ == &::google::protobuf::internal::kEmptyString) {
    showformat_ = new ::std::string;
  }
  return showformat_;
}
inline ::std::string* Monster_OtherConfig::release_showformat() {
  clear_has_showformat();
  if (showformat_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = showformat_;
    showformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Monster_OtherConfig::set_allocated_showformat(::std::string* showformat) {
  if (showformat_ != &::google::protobuf::internal::kEmptyString) {
    delete showformat_;
  }
  if (showformat) {
    set_has_showformat();
    showformat_ = showformat;
  } else {
    clear_has_showformat();
    showformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool Monster_OtherConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Monster_OtherConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Monster_OtherConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Monster_OtherConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Monster_OtherConfig::name() const {
  return *name_;
}
inline void Monster_OtherConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Monster_OtherConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Monster_OtherConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Monster_OtherConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Monster_OtherConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Monster_OtherConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 imageid = 3;
inline bool Monster_OtherConfig::has_imageid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Monster_OtherConfig::set_has_imageid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Monster_OtherConfig::clear_has_imageid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Monster_OtherConfig::clear_imageid() {
  imageid_ = 0;
  clear_has_imageid();
}
inline ::google::protobuf::int32 Monster_OtherConfig::imageid() const {
  return imageid_;
}
inline void Monster_OtherConfig::set_imageid(::google::protobuf::int32 value) {
  set_has_imageid();
  imageid_ = value;
}

// optional int32 id = 1;
inline bool Monster_OtherConfig::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Monster_OtherConfig::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Monster_OtherConfig::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Monster_OtherConfig::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Monster_OtherConfig::id() const {
  return id_;
}
inline void Monster_OtherConfig::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string showformat1 = 5;
inline bool Monster_OtherConfig::has_showformat1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Monster_OtherConfig::set_has_showformat1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Monster_OtherConfig::clear_has_showformat1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Monster_OtherConfig::clear_showformat1() {
  if (showformat1_ != &::google::protobuf::internal::kEmptyString) {
    showformat1_->clear();
  }
  clear_has_showformat1();
}
inline const ::std::string& Monster_OtherConfig::showformat1() const {
  return *showformat1_;
}
inline void Monster_OtherConfig::set_showformat1(const ::std::string& value) {
  set_has_showformat1();
  if (showformat1_ == &::google::protobuf::internal::kEmptyString) {
    showformat1_ = new ::std::string;
  }
  showformat1_->assign(value);
}
inline void Monster_OtherConfig::set_showformat1(const char* value) {
  set_has_showformat1();
  if (showformat1_ == &::google::protobuf::internal::kEmptyString) {
    showformat1_ = new ::std::string;
  }
  showformat1_->assign(value);
}
inline void Monster_OtherConfig::set_showformat1(const char* value, size_t size) {
  set_has_showformat1();
  if (showformat1_ == &::google::protobuf::internal::kEmptyString) {
    showformat1_ = new ::std::string;
  }
  showformat1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Monster_OtherConfig::mutable_showformat1() {
  set_has_showformat1();
  if (showformat1_ == &::google::protobuf::internal::kEmptyString) {
    showformat1_ = new ::std::string;
  }
  return showformat1_;
}
inline ::std::string* Monster_OtherConfig::release_showformat1() {
  clear_has_showformat1();
  if (showformat1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = showformat1_;
    showformat1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Monster_OtherConfig::set_allocated_showformat1(::std::string* showformat1) {
  if (showformat1_ != &::google::protobuf::internal::kEmptyString) {
    delete showformat1_;
  }
  if (showformat1) {
    set_has_showformat1();
    showformat1_ = showformat1;
  } else {
    clear_has_showformat1();
    showformat1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rate = 6;
inline bool Monster_OtherConfig::has_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Monster_OtherConfig::set_has_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Monster_OtherConfig::clear_has_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Monster_OtherConfig::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 Monster_OtherConfig::rate() const {
  return rate_;
}
inline void Monster_OtherConfig::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// optional string desc = 7;
inline bool Monster_OtherConfig::has_desc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Monster_OtherConfig::set_has_desc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Monster_OtherConfig::clear_has_desc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Monster_OtherConfig::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Monster_OtherConfig::desc() const {
  return *desc_;
}
inline void Monster_OtherConfig::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Monster_OtherConfig::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Monster_OtherConfig::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Monster_OtherConfig::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* Monster_OtherConfig::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Monster_OtherConfig::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProConfigSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProConfigSpace::Monster_OtherConfig_ENUMTEST>() {
  return ::ProConfigSpace::Monster_OtherConfig_ENUMTEST_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Monster_5fOtherConfig_2eproto__INCLUDED
