// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProManagerConfig.proto

#ifndef PROTOBUF_ProManagerConfig_2eproto__INCLUDED
#define PROTOBUF_ProManagerConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "MonsterConfig.pb.h"
#include "ItemBaseConfig.pb.h"
#include "DropConfig.pb.h"
#include "Monster_OtherConfig.pb.h"
#include "ItemShowConfig.pb.h"
#include "ItemSellConfig.pb.h"
// @@protoc_insertion_point(includes)

namespace ProConfigSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProManagerConfig_2eproto();
void protobuf_AssignDesc_ProManagerConfig_2eproto();
void protobuf_ShutdownFile_ProManagerConfig_2eproto();

class ProManagerConfig;

// ===================================================================

class ProManagerConfig : public ::google::protobuf::Message {
 public:
  ProManagerConfig();
  virtual ~ProManagerConfig();

  ProManagerConfig(const ProManagerConfig& from);

  inline ProManagerConfig& operator=(const ProManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProManagerConfig& default_instance();

  void Swap(ProManagerConfig* other);

  // implements Message ----------------------------------------------

  ProManagerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProManagerConfig& from);
  void MergeFrom(const ProManagerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated .ProConfigSpace.MonsterConfig monster = 2;
  inline int monster_size() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 2;
  inline const ::ProConfigSpace::MonsterConfig& monster(int index) const;
  inline ::ProConfigSpace::MonsterConfig* mutable_monster(int index);
  inline ::ProConfigSpace::MonsterConfig* add_monster();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::MonsterConfig >&
      monster() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::MonsterConfig >*
      mutable_monster();

  // repeated .ProConfigSpace.ItemBaseConfig itembase = 3;
  inline int itembase_size() const;
  inline void clear_itembase();
  static const int kItembaseFieldNumber = 3;
  inline const ::ProConfigSpace::ItemBaseConfig& itembase(int index) const;
  inline ::ProConfigSpace::ItemBaseConfig* mutable_itembase(int index);
  inline ::ProConfigSpace::ItemBaseConfig* add_itembase();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemBaseConfig >&
      itembase() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemBaseConfig >*
      mutable_itembase();

  // repeated .ProConfigSpace.DropConfig drop = 4;
  inline int drop_size() const;
  inline void clear_drop();
  static const int kDropFieldNumber = 4;
  inline const ::ProConfigSpace::DropConfig& drop(int index) const;
  inline ::ProConfigSpace::DropConfig* mutable_drop(int index);
  inline ::ProConfigSpace::DropConfig* add_drop();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::DropConfig >&
      drop() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::DropConfig >*
      mutable_drop();

  // repeated .ProConfigSpace.Monster_OtherConfig monster_other = 5;
  inline int monster_other_size() const;
  inline void clear_monster_other();
  static const int kMonsterOtherFieldNumber = 5;
  inline const ::ProConfigSpace::Monster_OtherConfig& monster_other(int index) const;
  inline ::ProConfigSpace::Monster_OtherConfig* mutable_monster_other(int index);
  inline ::ProConfigSpace::Monster_OtherConfig* add_monster_other();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::Monster_OtherConfig >&
      monster_other() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::Monster_OtherConfig >*
      mutable_monster_other();

  // repeated .ProConfigSpace.ItemShowConfig itemshow = 6;
  inline int itemshow_size() const;
  inline void clear_itemshow();
  static const int kItemshowFieldNumber = 6;
  inline const ::ProConfigSpace::ItemShowConfig& itemshow(int index) const;
  inline ::ProConfigSpace::ItemShowConfig* mutable_itemshow(int index);
  inline ::ProConfigSpace::ItemShowConfig* add_itemshow();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemShowConfig >&
      itemshow() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemShowConfig >*
      mutable_itemshow();

  // repeated .ProConfigSpace.ItemSellConfig itemsell = 7;
  inline int itemsell_size() const;
  inline void clear_itemsell();
  static const int kItemsellFieldNumber = 7;
  inline const ::ProConfigSpace::ItemSellConfig& itemsell(int index) const;
  inline ::ProConfigSpace::ItemSellConfig* mutable_itemsell(int index);
  inline ::ProConfigSpace::ItemSellConfig* add_itemsell();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemSellConfig >&
      itemsell() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemSellConfig >*
      mutable_itemsell();

  // @@protoc_insertion_point(class_scope:ProConfigSpace.ProManagerConfig)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::MonsterConfig > monster_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemBaseConfig > itembase_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::DropConfig > drop_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::Monster_OtherConfig > monster_other_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemShowConfig > itemshow_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemSellConfig > itemsell_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ProManagerConfig_2eproto();
  friend void protobuf_AssignDesc_ProManagerConfig_2eproto();
  friend void protobuf_ShutdownFile_ProManagerConfig_2eproto();

  void InitAsDefaultInstance();
  static ProManagerConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// ProManagerConfig

// optional string version = 1;
inline bool ProManagerConfig::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProManagerConfig::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProManagerConfig::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProManagerConfig::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& ProManagerConfig::version() const {
  return *version_;
}
inline void ProManagerConfig::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ProManagerConfig::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void ProManagerConfig::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProManagerConfig::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* ProManagerConfig::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProManagerConfig::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ProConfigSpace.MonsterConfig monster = 2;
inline int ProManagerConfig::monster_size() const {
  return monster_.size();
}
inline void ProManagerConfig::clear_monster() {
  monster_.Clear();
}
inline const ::ProConfigSpace::MonsterConfig& ProManagerConfig::monster(int index) const {
  return monster_.Get(index);
}
inline ::ProConfigSpace::MonsterConfig* ProManagerConfig::mutable_monster(int index) {
  return monster_.Mutable(index);
}
inline ::ProConfigSpace::MonsterConfig* ProManagerConfig::add_monster() {
  return monster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::MonsterConfig >&
ProManagerConfig::monster() const {
  return monster_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::MonsterConfig >*
ProManagerConfig::mutable_monster() {
  return &monster_;
}

// repeated .ProConfigSpace.ItemBaseConfig itembase = 3;
inline int ProManagerConfig::itembase_size() const {
  return itembase_.size();
}
inline void ProManagerConfig::clear_itembase() {
  itembase_.Clear();
}
inline const ::ProConfigSpace::ItemBaseConfig& ProManagerConfig::itembase(int index) const {
  return itembase_.Get(index);
}
inline ::ProConfigSpace::ItemBaseConfig* ProManagerConfig::mutable_itembase(int index) {
  return itembase_.Mutable(index);
}
inline ::ProConfigSpace::ItemBaseConfig* ProManagerConfig::add_itembase() {
  return itembase_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemBaseConfig >&
ProManagerConfig::itembase() const {
  return itembase_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemBaseConfig >*
ProManagerConfig::mutable_itembase() {
  return &itembase_;
}

// repeated .ProConfigSpace.DropConfig drop = 4;
inline int ProManagerConfig::drop_size() const {
  return drop_.size();
}
inline void ProManagerConfig::clear_drop() {
  drop_.Clear();
}
inline const ::ProConfigSpace::DropConfig& ProManagerConfig::drop(int index) const {
  return drop_.Get(index);
}
inline ::ProConfigSpace::DropConfig* ProManagerConfig::mutable_drop(int index) {
  return drop_.Mutable(index);
}
inline ::ProConfigSpace::DropConfig* ProManagerConfig::add_drop() {
  return drop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::DropConfig >&
ProManagerConfig::drop() const {
  return drop_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::DropConfig >*
ProManagerConfig::mutable_drop() {
  return &drop_;
}

// repeated .ProConfigSpace.Monster_OtherConfig monster_other = 5;
inline int ProManagerConfig::monster_other_size() const {
  return monster_other_.size();
}
inline void ProManagerConfig::clear_monster_other() {
  monster_other_.Clear();
}
inline const ::ProConfigSpace::Monster_OtherConfig& ProManagerConfig::monster_other(int index) const {
  return monster_other_.Get(index);
}
inline ::ProConfigSpace::Monster_OtherConfig* ProManagerConfig::mutable_monster_other(int index) {
  return monster_other_.Mutable(index);
}
inline ::ProConfigSpace::Monster_OtherConfig* ProManagerConfig::add_monster_other() {
  return monster_other_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::Monster_OtherConfig >&
ProManagerConfig::monster_other() const {
  return monster_other_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::Monster_OtherConfig >*
ProManagerConfig::mutable_monster_other() {
  return &monster_other_;
}

// repeated .ProConfigSpace.ItemShowConfig itemshow = 6;
inline int ProManagerConfig::itemshow_size() const {
  return itemshow_.size();
}
inline void ProManagerConfig::clear_itemshow() {
  itemshow_.Clear();
}
inline const ::ProConfigSpace::ItemShowConfig& ProManagerConfig::itemshow(int index) const {
  return itemshow_.Get(index);
}
inline ::ProConfigSpace::ItemShowConfig* ProManagerConfig::mutable_itemshow(int index) {
  return itemshow_.Mutable(index);
}
inline ::ProConfigSpace::ItemShowConfig* ProManagerConfig::add_itemshow() {
  return itemshow_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemShowConfig >&
ProManagerConfig::itemshow() const {
  return itemshow_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemShowConfig >*
ProManagerConfig::mutable_itemshow() {
  return &itemshow_;
}

// repeated .ProConfigSpace.ItemSellConfig itemsell = 7;
inline int ProManagerConfig::itemsell_size() const {
  return itemsell_.size();
}
inline void ProManagerConfig::clear_itemsell() {
  itemsell_.Clear();
}
inline const ::ProConfigSpace::ItemSellConfig& ProManagerConfig::itemsell(int index) const {
  return itemsell_.Get(index);
}
inline ::ProConfigSpace::ItemSellConfig* ProManagerConfig::mutable_itemsell(int index) {
  return itemsell_.Mutable(index);
}
inline ::ProConfigSpace::ItemSellConfig* ProManagerConfig::add_itemsell() {
  return itemsell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemSellConfig >&
ProManagerConfig::itemsell() const {
  return itemsell_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ItemSellConfig >*
ProManagerConfig::mutable_itemsell() {
  return &itemsell_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProConfigSpace

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProManagerConfig_2eproto__INCLUDED
