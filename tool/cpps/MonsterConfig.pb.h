// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterConfig.proto

#ifndef PROTOBUF_MonsterConfig_2eproto__INCLUDED
#define PROTOBUF_MonsterConfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ConfigTypeGroup.pb.h"
// @@protoc_insertion_point(includes)

namespace ProConfigSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MonsterConfig_2eproto();
void protobuf_AssignDesc_MonsterConfig_2eproto();
void protobuf_ShutdownFile_MonsterConfig_2eproto();

class MonsterConfig;

enum MonsterConfig_MONSTERTYPE {
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_7 = 7,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_2 = 2,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_11 = 11,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_13 = 13,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_5 = 5,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_12 = 12,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_10 = 10,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_6 = 6,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_9 = 9,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_8 = 8,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_1 = 1,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_4 = 4,
  MonsterConfig_MONSTERTYPE_MONSTER_TYPE_3 = 3
};
bool MonsterConfig_MONSTERTYPE_IsValid(int value);
const MonsterConfig_MONSTERTYPE MonsterConfig_MONSTERTYPE_MONSTERTYPE_MIN = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_1;
const MonsterConfig_MONSTERTYPE MonsterConfig_MONSTERTYPE_MONSTERTYPE_MAX = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_13;
const int MonsterConfig_MONSTERTYPE_MONSTERTYPE_ARRAYSIZE = MonsterConfig_MONSTERTYPE_MONSTERTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MonsterConfig_MONSTERTYPE_descriptor();
inline const ::std::string& MonsterConfig_MONSTERTYPE_Name(MonsterConfig_MONSTERTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MonsterConfig_MONSTERTYPE_descriptor(), value);
}
inline bool MonsterConfig_MONSTERTYPE_Parse(
    const ::std::string& name, MonsterConfig_MONSTERTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonsterConfig_MONSTERTYPE>(
    MonsterConfig_MONSTERTYPE_descriptor(), name, value);
}
// ===================================================================

class MonsterConfig : public ::google::protobuf::Message {
 public:
  MonsterConfig();
  virtual ~MonsterConfig();

  MonsterConfig(const MonsterConfig& from);

  inline MonsterConfig& operator=(const MonsterConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterConfig& default_instance();

  void Swap(MonsterConfig* other);

  // implements Message ----------------------------------------------

  MonsterConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterConfig& from);
  void MergeFrom(const MonsterConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MonsterConfig_MONSTERTYPE MONSTERTYPE;
  static const MONSTERTYPE MONSTER_TYPE_7 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_7;
  static const MONSTERTYPE MONSTER_TYPE_2 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_2;
  static const MONSTERTYPE MONSTER_TYPE_11 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_11;
  static const MONSTERTYPE MONSTER_TYPE_13 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_13;
  static const MONSTERTYPE MONSTER_TYPE_5 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_5;
  static const MONSTERTYPE MONSTER_TYPE_12 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_12;
  static const MONSTERTYPE MONSTER_TYPE_10 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_10;
  static const MONSTERTYPE MONSTER_TYPE_6 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_6;
  static const MONSTERTYPE MONSTER_TYPE_9 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_9;
  static const MONSTERTYPE MONSTER_TYPE_8 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_8;
  static const MONSTERTYPE MONSTER_TYPE_1 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_1;
  static const MONSTERTYPE MONSTER_TYPE_4 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_4;
  static const MONSTERTYPE MONSTER_TYPE_3 = MonsterConfig_MONSTERTYPE_MONSTER_TYPE_3;
  static inline bool MONSTERTYPE_IsValid(int value) {
    return MonsterConfig_MONSTERTYPE_IsValid(value);
  }
  static const MONSTERTYPE MONSTERTYPE_MIN =
    MonsterConfig_MONSTERTYPE_MONSTERTYPE_MIN;
  static const MONSTERTYPE MONSTERTYPE_MAX =
    MonsterConfig_MONSTERTYPE_MONSTERTYPE_MAX;
  static const int MONSTERTYPE_ARRAYSIZE =
    MonsterConfig_MONSTERTYPE_MONSTERTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MONSTERTYPE_descriptor() {
    return MonsterConfig_MONSTERTYPE_descriptor();
  }
  static inline const ::std::string& MONSTERTYPE_Name(MONSTERTYPE value) {
    return MonsterConfig_MONSTERTYPE_Name(value);
  }
  static inline bool MONSTERTYPE_Parse(const ::std::string& name,
      MONSTERTYPE* value) {
    return MonsterConfig_MONSTERTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .ProConfigSpace.MonsterConfig.MONSTERTYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::ProConfigSpace::MonsterConfig_MONSTERTYPE type() const;
  inline void set_type(::ProConfigSpace::MonsterConfig_MONSTERTYPE value);

  // optional int32 monsterid = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsteridFieldNumber = 1;
  inline ::google::protobuf::int32 monsterid() const;
  inline void set_monsterid(::google::protobuf::int32 value);

  // repeated int32 position = 4;
  inline int position_size() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline ::google::protobuf::int32 position(int index) const;
  inline void set_position(int index, ::google::protobuf::int32 value);
  inline void add_position(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      position() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_position();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .ProConfigSpace.ConfigTypeGroup groupposition = 5;
  inline int groupposition_size() const;
  inline void clear_groupposition();
  static const int kGrouppositionFieldNumber = 5;
  inline const ::ProConfigSpace::ConfigTypeGroup& groupposition(int index) const;
  inline ::ProConfigSpace::ConfigTypeGroup* mutable_groupposition(int index);
  inline ::ProConfigSpace::ConfigTypeGroup* add_groupposition();
  inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ConfigTypeGroup >&
      groupposition() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ConfigTypeGroup >*
      mutable_groupposition();

  // @@protoc_insertion_point(class_scope:ProConfigSpace.MonsterConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::int32 monsterid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > position_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ConfigTypeGroup > groupposition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MonsterConfig_2eproto();
  friend void protobuf_AssignDesc_MonsterConfig_2eproto();
  friend void protobuf_ShutdownFile_MonsterConfig_2eproto();

  void InitAsDefaultInstance();
  static MonsterConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// MonsterConfig

// optional .ProConfigSpace.MonsterConfig.MONSTERTYPE type = 3;
inline bool MonsterConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterConfig::clear_type() {
  type_ = 7;
  clear_has_type();
}
inline ::ProConfigSpace::MonsterConfig_MONSTERTYPE MonsterConfig::type() const {
  return static_cast< ::ProConfigSpace::MonsterConfig_MONSTERTYPE >(type_);
}
inline void MonsterConfig::set_type(::ProConfigSpace::MonsterConfig_MONSTERTYPE value) {
  assert(::ProConfigSpace::MonsterConfig_MONSTERTYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 monsterid = 1;
inline bool MonsterConfig::has_monsterid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterConfig::set_has_monsterid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterConfig::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterConfig::clear_monsterid() {
  monsterid_ = 0;
  clear_has_monsterid();
}
inline ::google::protobuf::int32 MonsterConfig::monsterid() const {
  return monsterid_;
}
inline void MonsterConfig::set_monsterid(::google::protobuf::int32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// repeated int32 position = 4;
inline int MonsterConfig::position_size() const {
  return position_.size();
}
inline void MonsterConfig::clear_position() {
  position_.Clear();
}
inline ::google::protobuf::int32 MonsterConfig::position(int index) const {
  return position_.Get(index);
}
inline void MonsterConfig::set_position(int index, ::google::protobuf::int32 value) {
  position_.Set(index, value);
}
inline void MonsterConfig::add_position(::google::protobuf::int32 value) {
  position_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MonsterConfig::position() const {
  return position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MonsterConfig::mutable_position() {
  return &position_;
}

// optional string name = 2;
inline bool MonsterConfig::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterConfig::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MonsterConfig::name() const {
  return *name_;
}
inline void MonsterConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MonsterConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MonsterConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MonsterConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MonsterConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MonsterConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ProConfigSpace.ConfigTypeGroup groupposition = 5;
inline int MonsterConfig::groupposition_size() const {
  return groupposition_.size();
}
inline void MonsterConfig::clear_groupposition() {
  groupposition_.Clear();
}
inline const ::ProConfigSpace::ConfigTypeGroup& MonsterConfig::groupposition(int index) const {
  return groupposition_.Get(index);
}
inline ::ProConfigSpace::ConfigTypeGroup* MonsterConfig::mutable_groupposition(int index) {
  return groupposition_.Mutable(index);
}
inline ::ProConfigSpace::ConfigTypeGroup* MonsterConfig::add_groupposition() {
  return groupposition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ConfigTypeGroup >&
MonsterConfig::groupposition() const {
  return groupposition_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProConfigSpace::ConfigTypeGroup >*
MonsterConfig::mutable_groupposition() {
  return &groupposition_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProConfigSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProConfigSpace::MonsterConfig_MONSTERTYPE>() {
  return ::ProConfigSpace::MonsterConfig_MONSTERTYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MonsterConfig_2eproto__INCLUDED
