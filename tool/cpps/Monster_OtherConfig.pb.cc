// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Monster_OtherConfig.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Monster_OtherConfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProConfigSpace {

namespace {

const ::google::protobuf::Descriptor* Monster_OtherConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Monster_OtherConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Monster_OtherConfig_ENUMTEST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Monster_5fOtherConfig_2eproto() {
  protobuf_AddDesc_Monster_5fOtherConfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Monster_OtherConfig.proto");
  GOOGLE_CHECK(file != NULL);
  Monster_OtherConfig_descriptor_ = file->message_type(0);
  static const int Monster_OtherConfig_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, showformat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, imageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, showformat1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, desc_),
  };
  Monster_OtherConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Monster_OtherConfig_descriptor_,
      Monster_OtherConfig::default_instance_,
      Monster_OtherConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Monster_OtherConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Monster_OtherConfig));
  Monster_OtherConfig_ENUMTEST_descriptor_ = Monster_OtherConfig_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Monster_5fOtherConfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Monster_OtherConfig_descriptor_, &Monster_OtherConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Monster_5fOtherConfig_2eproto() {
  delete Monster_OtherConfig::default_instance_;
  delete Monster_OtherConfig_reflection_;
}

void protobuf_AddDesc_Monster_5fOtherConfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ProConfigSpace::protobuf_AddDesc_ConfigTypeGroup_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031Monster_OtherConfig.proto\022\016ProConfigSp"
    "ace\032\025ConfigTypeGroup.proto\"\276\001\n\023Monster_O"
    "therConfig\022\022\n\nshowformat\030\004 \001(\t\022\014\n\004name\030\002"
    " \001(\t\022\017\n\007imageid\030\003 \001(\005\022\n\n\002id\030\001 \001(\005\022\023\n\013sho"
    "wformat1\030\005 \001(\t\022\014\n\004rate\030\006 \001(\005\022\014\n\004desc\030\007 \001"
    "(\t\"7\n\010ENUMTEST\022\r\n\tENUMTESTB\020\002\022\r\n\tENUMTES"
    "TC\020\004\022\r\n\tENUMTESTA\020\001", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Monster_OtherConfig.proto", &protobuf_RegisterTypes);
  Monster_OtherConfig::default_instance_ = new Monster_OtherConfig();
  Monster_OtherConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Monster_5fOtherConfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Monster_5fOtherConfig_2eproto {
  StaticDescriptorInitializer_Monster_5fOtherConfig_2eproto() {
    protobuf_AddDesc_Monster_5fOtherConfig_2eproto();
  }
} static_descriptor_initializer_Monster_5fOtherConfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Monster_OtherConfig_ENUMTEST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monster_OtherConfig_ENUMTEST_descriptor_;
}
bool Monster_OtherConfig_ENUMTEST_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig::ENUMTESTB;
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig::ENUMTESTC;
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig::ENUMTESTA;
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig::ENUMTEST_MIN;
const Monster_OtherConfig_ENUMTEST Monster_OtherConfig::ENUMTEST_MAX;
const int Monster_OtherConfig::ENUMTEST_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Monster_OtherConfig::kShowformatFieldNumber;
const int Monster_OtherConfig::kNameFieldNumber;
const int Monster_OtherConfig::kImageidFieldNumber;
const int Monster_OtherConfig::kIdFieldNumber;
const int Monster_OtherConfig::kShowformat1FieldNumber;
const int Monster_OtherConfig::kRateFieldNumber;
const int Monster_OtherConfig::kDescFieldNumber;
#endif  // !_MSC_VER

Monster_OtherConfig::Monster_OtherConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Monster_OtherConfig::InitAsDefaultInstance() {
}

Monster_OtherConfig::Monster_OtherConfig(const Monster_OtherConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Monster_OtherConfig::SharedCtor() {
  _cached_size_ = 0;
  showformat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageid_ = 0;
  id_ = 0;
  showformat1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Monster_OtherConfig::~Monster_OtherConfig() {
  SharedDtor();
}

void Monster_OtherConfig::SharedDtor() {
  if (showformat_ != &::google::protobuf::internal::kEmptyString) {
    delete showformat_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (showformat1_ != &::google::protobuf::internal::kEmptyString) {
    delete showformat1_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void Monster_OtherConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Monster_OtherConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Monster_OtherConfig_descriptor_;
}

const Monster_OtherConfig& Monster_OtherConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Monster_5fOtherConfig_2eproto();
  return *default_instance_;
}

Monster_OtherConfig* Monster_OtherConfig::default_instance_ = NULL;

Monster_OtherConfig* Monster_OtherConfig::New() const {
  return new Monster_OtherConfig;
}

void Monster_OtherConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_showformat()) {
      if (showformat_ != &::google::protobuf::internal::kEmptyString) {
        showformat_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    imageid_ = 0;
    id_ = 0;
    if (has_showformat1()) {
      if (showformat1_ != &::google::protobuf::internal::kEmptyString) {
        showformat1_->clear();
      }
    }
    rate_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Monster_OtherConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_imageid;
        break;
      }

      // optional int32 imageid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageid_)));
          set_has_imageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_showformat;
        break;
      }

      // optional string showformat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showformat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showformat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->showformat().data(), this->showformat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_showformat1;
        break;
      }

      // optional string showformat1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showformat1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showformat1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->showformat1().data(), this->showformat1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // optional int32 rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_desc;
        break;
      }

      // optional string desc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Monster_OtherConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 imageid = 3;
  if (has_imageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->imageid(), output);
  }

  // optional string showformat = 4;
  if (has_showformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showformat().data(), this->showformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->showformat(), output);
  }

  // optional string showformat1 = 5;
  if (has_showformat1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showformat1().data(), this->showformat1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->showformat1(), output);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Monster_OtherConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 imageid = 3;
  if (has_imageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->imageid(), target);
  }

  // optional string showformat = 4;
  if (has_showformat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showformat().data(), this->showformat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->showformat(), target);
  }

  // optional string showformat1 = 5;
  if (has_showformat1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->showformat1().data(), this->showformat1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->showformat1(), target);
  }

  // optional int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  // optional string desc = 7;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Monster_OtherConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string showformat = 4;
    if (has_showformat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showformat());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 imageid = 3;
    if (has_imageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageid());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string showformat1 = 5;
    if (has_showformat1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showformat1());
    }

    // optional int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // optional string desc = 7;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Monster_OtherConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Monster_OtherConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Monster_OtherConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Monster_OtherConfig::MergeFrom(const Monster_OtherConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_showformat()) {
      set_showformat(from.showformat());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_imageid()) {
      set_imageid(from.imageid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_showformat1()) {
      set_showformat1(from.showformat1());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Monster_OtherConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Monster_OtherConfig::CopyFrom(const Monster_OtherConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Monster_OtherConfig::IsInitialized() const {

  return true;
}

void Monster_OtherConfig::Swap(Monster_OtherConfig* other) {
  if (other != this) {
    std::swap(showformat_, other->showformat_);
    std::swap(name_, other->name_);
    std::swap(imageid_, other->imageid_);
    std::swap(id_, other->id_);
    std::swap(showformat1_, other->showformat1_);
    std::swap(rate_, other->rate_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Monster_OtherConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Monster_OtherConfig_descriptor_;
  metadata.reflection = Monster_OtherConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProConfigSpace

// @@protoc_insertion_point(global_scope)
